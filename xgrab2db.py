#!/usr/bin/env python
# -*- coding: UTF-8 -*-
import os, sys, sqlite3, argparse
from xgrablib import xgrab2db, xgrabFromdb

def makeIndex(con):
    indices = """BEGIN TRANSACTION;
                CREATE UNIQUE INDEX IF NOT EXISTS index_STRAATNAMEN_ID  ON STRAATNAMEN (ID);
                CREATE  INDEX IF NOT EXISTS index_STRAATNAMEN_STRAATCODE  ON STRAATNAMEN (STRAATCODE);   
                CREATE UNIQUE INDEX IF NOT EXISTS index_STRAATNAAMSTATUSSEN_ID ON STRAATNAAMSTATUSSEN (ID);
                CREATE  INDEX IF NOT EXISTS index_STRAATNAAMSTATUSSEN_STRAATNAAMID ON STRAATNAAMSTATUSSEN (STRAATNAAMID); 
                CREATE UNIQUE INDEX IF NOT EXISTS index_HUISNUMMERS_ID ON HUISNUMMERS (ID);
                CREATE  INDEX IF NOT EXISTS index_HUISNUMMERS_STRAATNAAMID ON HUISNUMMERS (STRAATNAAMID); 
                CREATE UNIQUE INDEX IF NOT EXISTS index_HUISNUMMERSTATUSSEN_ID ON HUISNUMMERSTATUSSEN (ID);
                CREATE  INDEX IF NOT EXISTS index_HUISNUMMERSTATUSSEN_HUISNUMMERID ON HUISNUMMERSTATUSSEN (HUISNUMMERID);
                CREATE UNIQUE INDEX IF NOT EXISTS index_SUBADRESSEN_ID ON SUBADRESSEN (ID);
                CREATE  INDEX IF NOT EXISTS index_SUBADRESSEN_HUISNUMMERID ON SUBADRESSEN (HUISNUMMERID);
                CREATE UNIQUE INDEX IF NOT EXISTS index_SUBADRESSTATUSSEN_ID ON SUBADRESSTATUSSEN (ID);
                CREATE  INDEX IF NOT EXISTS index_SUBADRESSTATUSSEN_SUBADRESID ON SUBADRESSTATUSSEN (SUBADRESID);
                CREATE UNIQUE INDEX IF NOT EXISTS index_POSTKANTONCODES_ID  ON POSTKANTONCODES (ID);
                CREATE  INDEX IF NOT EXISTS index_POSTKANTONCODES_HUISNUMMERID  ON POSTKANTONCODES (HUISNUMMERID);  
                CREATE UNIQUE INDEX IF NOT EXISTS index_RRSTRAATNAAM_STRAATNAAM_RELATIES_ID ON RRSTRAATNAAM_STRAATNAAM_RELATIES (ID);
                CREATE  INDEX IF NOT EXISTS index_RRSTRAATNAAM_STRAATNAAM_RELATIES_STRAATNAAMID ON RRSTRAATNAAM_STRAATNAAM_RELATIES (STRAATNAAMID);  
                CREATE UNIQUE INDEX IF NOT EXISTS index_STRAATKANTEN_ID ON STRAATKANTEN (ID);
                CREATE  INDEX IF NOT EXISTS index_STRAATKANTEN_STRAATNAAMID ON STRAATKANTEN (STRAATNAAMID);
                CREATE  INDEX IF NOT EXISTS index_STRAATKANTEN_WEGOBJECTID ON STRAATKANTEN (WEGOBJECTID);
                CREATE UNIQUE INDEX IF NOT EXISTS index_WEGOBJECTEN_ID ON WEGOBJECTEN (ID);
                CREATE INDEX IF NOT EXISTS index_WEGOBJECTEN_IDENTIFICATORWEGOBJECT ON WEGOBJECTEN (IDENTIFICATORWEGOBJECT); 
                CREATE UNIQUE INDEX IF NOT EXISTS index_WEGVERBINDINGSTATUSSEN_ID ON WEGVERBINDINGSTATUSSEN (ID);    
                CREATE  INDEX IF NOT EXISTS index_WEGVERBINDINGSTATUSSEN_WEGOBJECTID ON WEGVERBINDINGSTATUSSEN (WEGOBJECTID);
                CREATE UNIQUE INDEX IF NOT EXISTS index_WEGVERBINDINGGEOMETRIEN_ID ON WEGVERBINDINGGEOMETRIEN (ID);
                CREATE  INDEX IF NOT EXISTS index_WEGVERBINDINGGEOMETRIEN_WEGOBJECTID ON WEGVERBINDINGGEOMETRIEN (WEGOBJECTID);
                CREATE UNIQUE INDEX IF NOT EXISTS index_TERREINOBJECT_HUISNUMMER_RELATIES_ID  ON TERREINOBJECT_HUISNUMMER_RELATIES (ID);
                CREATE  INDEX IF NOT EXISTS index_TERREINOBJECT_HUISNUMMER_RELATIES_TERREINOBJECTID ON TERREINOBJECT_HUISNUMMER_RELATIES (TERREINOBJECTID);
                CREATE  INDEX IF NOT EXISTS index_TERREINOBJECT_HUISNUMMER_RELATIES_HUISNUMMERID ON TERREINOBJECT_HUISNUMMER_RELATIES (HUISNUMMERID);
                CREATE UNIQUE INDEX IF NOT EXISTS index_TERREINOBJECTEN_ID  ON TERREINOBJECTEN (ID);
                CREATE  INDEX IF NOT EXISTS index_TERREINOBJECTEN_IDENTIFICATORTERREINOBJECT ON TERREINOBJECTEN (IDENTIFICATORTERREINOBJECT);
                CREATE UNIQUE INDEX IF NOT EXISTS index_GEBOUWSTATUSSEN_ID ON GEBOUWSTATUSSEN (ID);
                CREATE  INDEX IF NOT EXISTS index_GEBOUWSTATUSSEN_TERREINOBJECTID ON GEBOUWSTATUSSEN (TERREINOBJECTID);
                CREATE UNIQUE INDEX IF NOT EXISTS index_GEBOUWGEOMETRIEN_ID  ON GEBOUWGEOMETRIEN (ID);
                CREATE  INDEX IF NOT EXISTS index_GEBOUWGEOMETRIEN_TERREINOBJECTID  ON GEBOUWGEOMETRIEN (TERREINOBJECTID);
                CREATE UNIQUE INDEX IF NOT EXISTS index_ADRESPOSITIES_ID  ON ADRESPOSITIES (ID);
                CREATE  INDEX IF NOT EXISTS index_ADRESPOSITIES_ADRESID  ON ADRESPOSITIES (ADRESID);
                CREATE UNIQUE INDEX IF NOT EXISTS index_RRADRESSEN_ID  ON RRADRESSEN (ID);
                CREATE UNIQUE INDEX IF NOT EXISTS index_ADRES_RRADRES_RELATIES_ID  ON ADRES_RRADRES_RELATIES (ID);
                CREATE  INDEX IF NOT EXISTS index_ADRES_RRADRES_RELATIES_ADRESID  ON ADRES_RRADRES_RELATIES (ADRESID);
                CREATE  INDEX IF NOT EXISTS index_ADRES_RRADRES_RELATIES_RRADRESID  ON ADRES_RRADRES_RELATIES (RRADRESID);  
                CREATE UNIQUE INDEX IF NOT EXISTS index_KADADRESSEN_ID  ON KADADRESSEN (ID);
                CREATE UNIQUE INDEX IF NOT EXISTS index_ADRES_KADADRES_RELATIES_ID  ON ADRES_KADADRES_RELATIES (ID);
                CREATE  INDEX IF NOT EXISTS index_ADRES_KADADRES_RELATIES_ADRESID  ON ADRES_KADADRES_RELATIES (ADRESID);
                CREATE  INDEX IF NOT EXISTS index_ADRES_KADADRES_RELATIES_KADADRESID  ON ADRES_KADADRES_RELATIES (KADADRESID);
            COMMIT; """

    con.executescript(indices)
    con.commit()   
    
def main():
  if not args.xgrabPath or not args.xgrabDB:
    return

  xgrabPath = args.xgrabPath
  xgrabDB =   args.xgrabDB
  con = None

  try:
    if args.update == False:
       if os.path.exists( xgrabDB ): os.remove(xgrabDB)
       con = sqlite3.Connection(xgrabDB, detect_types=sqlite3.PARSE_DECLTYPES)
       xgrab = xgrab2db( xgrabPath, con)
       xgrab.createAll()
       makeIndex(con)
    elif os.path.exists( xgrabDB ) and ( args.update == True ) :
       con = sqlite3.Connection(xgrabDB, detect_types=sqlite3.PARSE_DECLTYPES)
       xgrab = xgrab2db( xgrabPath, con)
       xgrab.updateAll()
       makeIndex(con)
    else:
      raise Exception("database does not exist: %s " % xgrabDB )

  finally:
    if con: con.close()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Create a sqlite database from a xGRAB-file')
    parser.add_argument('xgrabPath', help='The path to the xGRAB-file')
    parser.add_argument('xgrabDB', help='The output database (.sqlite)')
    parser.add_argument('--update', const=True, default=False,  dest='update', action='store_const',
              help='use a xGRAB diff to update a existing database, instead of overwriting it')
    args = parser.parse_args()

    main()

